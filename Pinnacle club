#include <iostream>
#include <string>
using namespace std;

class node {
public:
    int prn;
    string name;
    node* next;
};

class list {
private:
    node* head, *tail, *temp, *temp1;
public:
    list() : head(NULL), tail(NULL) {}

    void create();
    void display();
    void number();
    void remove();
    void reverse();
    void con(list a, list b);
};

void list::create() {
    int r, y;
    string nam;
    do {
        node* nnode = new node;
        cout << "Enter the PRN number: ";
        cin >> r;
        cout << "Enter the name of Member: ";
        cin >> nam;
        nnode->prn = r;
        nnode->name = nam;
        nnode->next = NULL;
        if (head == NULL) {
            head = nnode;
            tail = nnode;
        } else {
            tail->next = nnode;
            tail = nnode;
        }
        cout << "Do you want to continue? If yes, press 1: ";
        cin >> y;
    } while (y == 1);
}

void list::display() {
    temp = head;
    cout << "PRN" << "\t" << "Member name" << "\n";
    while (temp != NULL) {
        cout << temp->prn << "\t" << temp->name << "\n";
        temp = temp->next;
    }
}

void list::number() {
    int count = 0;
    temp = head;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }
    cout << "Total number of Members in Club: " << count << "\n";
}

void list::remove() {
    int d;
    temp = head;
    cout << "Enter the PRN of the member who wants to remove the membership: ";
    cin >> d;
    if (head != NULL && head->prn == d) {
        node* temp1 = head;
        head = head->next;
        delete temp1;
    } else if (tail != NULL && tail->prn == d) {
        while (temp->next != tail) {
            temp = temp->next;
        }
        node* temp1 = tail;
        tail = temp;
        tail->next = NULL;
        delete temp1;
    } else {
        while (temp != NULL && temp->next != NULL && temp->next->prn != d) {
            temp = temp->next;
        }
        if (temp != NULL && temp->next != NULL) {
            temp1 = temp->next;
            temp->next = temp1->next;
            delete temp1;
        }
    }
    display();
}

void list::reverse() {
    node* prev = NULL, * current = head, * next = NULL;
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    head = prev;
    display();
}

void list::con(list a, list b) {
    int y;
    a.display();
    b.create();
    b.display();
    a.tail->next = b.head;
    a.tail = b.tail;
    temp = a.head;
    cout << "After concatenation:\n";
    cout << "PRN" << "\t" << "Member name" << "\n";
    while (temp != NULL) {
        cout << temp->prn << "\t" << temp->name << "\n";
        temp = temp->next;
    }
    cout << "Do you want to display its reverse? (Press 1): ";
    cin >> y;
    if (y == 1) {
        temp = a.tail;
        while (temp != NULL) {
            cout << temp->prn << " " << temp->name << "\n";
            temp1 = a.head;
            while (temp1->next != temp) {
                temp1 = temp1->next;
            }
            temp = temp1;
        }
    }
}

int main() {
    int choice, ch = 1;
    list a, b;
    a.create();
    do {
        cout << "Enter one choice from the following:\n";
        cout << "1. Display the members\n2. Number of members in club\n3. Remove membership\n4. Reverse\n5. Concatenate\n";
        cin >> choice;
        switch (choice) {
            case 1: a.display(); break;
            case 2: a.number(); break;
            case 3: a.remove(); break;
            case 4: a.reverse(); break;
            case 5: a.con(a, b); break;
            default: cout << "!!ERROR!!\n";
        }
        cout << "Do you want to continue? (Press 1): ";
        cin >> ch;
    } while (ch == 1);
    return 0;
}
